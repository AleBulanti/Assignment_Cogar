// Generated by gencpp from file assignments/risk_evaluationRequest.msg
// DO NOT EDIT!


#ifndef ASSIGNMENTS_MESSAGE_RISK_EVALUATIONREQUEST_H
#define ASSIGNMENTS_MESSAGE_RISK_EVALUATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignments
{
template <class ContainerAllocator>
struct risk_evaluationRequest_
{
  typedef risk_evaluationRequest_<ContainerAllocator> Type;

  risk_evaluationRequest_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , hazard_type()  {
    }
  risk_evaluationRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , hazard_type(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _hazard_type_type;
  _hazard_type_type hazard_type;





  typedef boost::shared_ptr< ::assignments::risk_evaluationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignments::risk_evaluationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct risk_evaluationRequest_

typedef ::assignments::risk_evaluationRequest_<std::allocator<void> > risk_evaluationRequest;

typedef boost::shared_ptr< ::assignments::risk_evaluationRequest > risk_evaluationRequestPtr;
typedef boost::shared_ptr< ::assignments::risk_evaluationRequest const> risk_evaluationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignments::risk_evaluationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignments::risk_evaluationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignments::risk_evaluationRequest_<ContainerAllocator1> & lhs, const ::assignments::risk_evaluationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.hazard_type == rhs.hazard_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignments::risk_evaluationRequest_<ContainerAllocator1> & lhs, const ::assignments::risk_evaluationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignments

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignments::risk_evaluationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignments::risk_evaluationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignments::risk_evaluationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignments::risk_evaluationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignments::risk_evaluationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignments::risk_evaluationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignments::risk_evaluationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b6890268bcc9310515a1b3542022630";
  }

  static const char* value(const ::assignments::risk_evaluationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b6890268bcc9310ULL;
  static const uint64_t static_value2 = 0x515a1b3542022630ULL;
};

template<class ContainerAllocator>
struct DataType< ::assignments::risk_evaluationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignments/risk_evaluationRequest";
  }

  static const char* value(const ::assignments::risk_evaluationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignments::risk_evaluationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# RiskEvaluation.srv\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"string hazard_type   # E.g., \"crack\", \"unstable_section\", etc. \n"
"\n"
;
  }

  static const char* value(const ::assignments::risk_evaluationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignments::risk_evaluationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.hazard_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct risk_evaluationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignments::risk_evaluationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignments::risk_evaluationRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "hazard_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.hazard_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENTS_MESSAGE_RISK_EVALUATIONREQUEST_H
