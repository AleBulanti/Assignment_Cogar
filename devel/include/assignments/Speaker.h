// Generated by gencpp from file assignments/Speaker.msg
// DO NOT EDIT!


#ifndef ASSIGNMENTS_MESSAGE_SPEAKER_H
#define ASSIGNMENTS_MESSAGE_SPEAKER_H

#include <ros/service_traits.h>


#include <assignments/SpeakerRequest.h>
#include <assignments/SpeakerResponse.h>


namespace assignments
{

struct Speaker
{

typedef SpeakerRequest Request;
typedef SpeakerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Speaker
} // namespace assignments


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::assignments::Speaker > {
  static const char* value()
  {
    return "8b7095eb8dcd517ba7c37a0a06dcc50b";
  }

  static const char* value(const ::assignments::Speaker&) { return value(); }
};

template<>
struct DataType< ::assignments::Speaker > {
  static const char* value()
  {
    return "assignments/Speaker";
  }

  static const char* value(const ::assignments::Speaker&) { return value(); }
};


// service_traits::MD5Sum< ::assignments::SpeakerRequest> should match
// service_traits::MD5Sum< ::assignments::Speaker >
template<>
struct MD5Sum< ::assignments::SpeakerRequest>
{
  static const char* value()
  {
    return MD5Sum< ::assignments::Speaker >::value();
  }
  static const char* value(const ::assignments::SpeakerRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::assignments::SpeakerRequest> should match
// service_traits::DataType< ::assignments::Speaker >
template<>
struct DataType< ::assignments::SpeakerRequest>
{
  static const char* value()
  {
    return DataType< ::assignments::Speaker >::value();
  }
  static const char* value(const ::assignments::SpeakerRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::assignments::SpeakerResponse> should match
// service_traits::MD5Sum< ::assignments::Speaker >
template<>
struct MD5Sum< ::assignments::SpeakerResponse>
{
  static const char* value()
  {
    return MD5Sum< ::assignments::Speaker >::value();
  }
  static const char* value(const ::assignments::SpeakerResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::assignments::SpeakerResponse> should match
// service_traits::DataType< ::assignments::Speaker >
template<>
struct DataType< ::assignments::SpeakerResponse>
{
  static const char* value()
  {
    return DataType< ::assignments::Speaker >::value();
  }
  static const char* value(const ::assignments::SpeakerResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // ASSIGNMENTS_MESSAGE_SPEAKER_H
